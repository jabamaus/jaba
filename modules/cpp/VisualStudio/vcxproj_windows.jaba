open_instance :windows, type: :platform do
  cpp_src_ext ['.def', '.rc']
end

translator :vcxproj_windows do |vcxproj|
  vcglobal :ProjectName, projname
  vcglobal :ProjectGuid, guid
  vcglobal :Keyword, 'Win32Proj'
  vcglobal :RootNamespace, projname
  vcglobal :WindowsTargetPlatformVersion, winsdkver
  vcglobal :IgnoreWarnCompileDuplicatedFilename, true
end

translator :vcxproj_config_windows do |vcxproj, cfg_type|
  
  # First set of property groups
  #
  vcproperty 'PG1|ConfigurationType' do
    case cfg_type
    when :app, :console
      'Application'
    when :lib
      'StaticLibrary'
    when :dll
      'DynamicLibrary'
    else
      fail "'#{cfg_type}' unhandled"
    end
  end

  vcproperty 'PG1|UseDebugLibraries', debug

  vcproperty "PG1|CharacterSet" do
    case character_set
    when :mbcs
      :MultiByte
    when :unicode
      :Unicode
    end
  end

  vcproperty 'PG1|PlatformToolset', toolset

  # Second set of property groups
  #
  vcproperty 'PG2|OutDir' do
    if cfg_type == :lib
      libdir.relative_path_from(vcxproj.projdir, backslashes: true, trailing: true)
    else
      bindir.relative_path_from(vcxproj.projdir, backslashes: true, trailing: true)
    end
  end

  vcproperty 'PG2|IntDir' do
    objdir.relative_path_from(vcxproj.projdir, backslashes: true, trailing: true)
  end

  vcproperty 'PG2|TargetName', targetname
  vcproperty 'PG2|TargetExt', targetext

  # ClCompile
  #
  vcproperty 'ClCompile|AdditionalIncludeDirectories' do
    inc.map do |i|
      i.relative_path_from(vcxproj.projdir, backslashes: true)
    end.vs_join_paths(inherit: '%(AdditionalIncludeDirectories)')
  end

  vcproperty 'ClCompile|AdditionalOptions' do
    cflags.vs_join(separator: ' ', inherit: '%(AdditionalOptions)')
  end

  vcproperty 'ClCompile|DisableSpecificWarnings' do
    nowarn.vs_join(inherit: '%(DisableSpecificWarnings)')
  end

  vcproperty 'ClCompile|ExceptionHandling' do
    case exceptions
    when true
      :Sync
    when false
      false
    when :structured
      :Async
    else
      fail "'#{exceptions}' unhandled"
    end
  end

  vcproperty 'ClCompile|PreprocessorDefinitions' do
    defines.vs_join(inherit: '%(PreprocessorDefinitions)')
  end

  vcproperty 'ClCompile|RuntimeTypeInfo', rtti

  vcproperty 'ClCompile|TreatWarningAsError', warnerror

  # Link
  #
  vcproperty 'Link|AdditionalDependencies' do
    all_libs = libs.map{|l| l.relative_path_from(vcxproj.projdir, backslashes: true)} + syslibs
    all_libs.vs_join_paths(inherit: '%(AdditionalDependencies)')
  end

  if cfg_type != :lib
    vcproperty 'Link|SubSystem' do
      case cfg_type
      when :console
        :Console
      when :app, :dll
        :Windows
      else
        fail "'#{type}' unhandled"
      end
    end
    vcproperty 'ProjectReference|LinkLibraryDependencies', false
  end

  if cfg_type == :dll
    il = importlib
    if il
      vcproperty 'Link|ImportLibrary' do
        "#{libdir}/#{il}".relative_path_from(vcxproj.projdir, backslashes: true)
      end
    end
  end

  vcproperty "#{cfg_type == :lib ? :Lib : :Link}|TargetMachine" do
    :MachineX64 if x86_64?
  end

end
