# frozen_string_literal: true

define :cpp do

  title 'Cross platform C++ project definition'

   attr_array :platforms do
    title 'Target platforms'
    flags :required
  end
  
  define :project do

    attr :root, type: :dir do
      title 'Root directory relative to which all other paths are specified'
      note 'Root of the project specified as an offset from the .jaba file that contains the project definition. ' \
           'All paths are specified relative to this. Project files will be generated here unless $(projdir) is set. ' \
           'Path can also be absolute but explicitly specified absolute paths should be avoided in definitions where possible ' \
           'in order to not damage portability'
      default '.'
      base :local
    end
    
    # Control flow attributes
    #
    attr :host, type: :symbol do
      title 'Target host as an id'
      note 'Query current target host'
      flags :read_only
      example %q{
        case host
        when :vs2019
          ...
        when :xcode
          ...
        end
      }
    end

    attr :host_ref, type: :node_ref do
      title 'Target host as object'
      note 'Use when access to host attributes is required'
      node_type :host
    end

    attr :platform, type: :symbol do
      title 'Target platform as an id'
      note 'Query current target platform'
      flags :read_only
      example %Q{
        case platform
        when :windows
          ...
        when :macos
          ...
        end
      }
    end
      
    attr :platform_ref, type: :node_ref do
      title 'Target platform as an object'
      note 'Use when access to platform attributes is required'
      node_type :platform
    end
  
    # Common attributes
    #
    attr_array :configs, type: :symbol_or_string do
      title 'Build configurations'
      flags :required, :no_sort
      flag_options :export, :export_only
      example 'configs [:Debug, :Release]'
    end
    
    attr_array :deps, type: :node_ref do
      title 'Project dependencies'
      note 'List of ids of other cpp definitions'
      node_type :cpp
      make_handle do |id|
        "#{id}|#{host}|#{platform}"
      end
      example %Q{
        cpp :MyApp do
          type :app
          ...
          deps [:MyLib]
        end
        
        cpp :MyLib do
          type :lib
          ...
        end
      }
    end

    attr :projdir, type: :dir do
      title 'Directory in which projects will be generated'
      default 'projects'
      flags :no_check_exist # May get created during generation
      base :global
      note 'Specified as an offset from $(root). If not specified projects will be generated in $(root)'
      note 'Path can also be absolute but explicitly specified absolute paths should be avoided in definitions where possible ' \
            'in order to not damage portability'
      example %Q{
        cpp :MyApp do
          src ['**/*'] # Get all src in $(root), which defaults to directory of definition file
          projdir 'projects' # Place generated projects in 'projects' directory
        end
      }
    end
    
    attr :projname, type: :string do
      title 'Base name of project files'
      note 'Defaults to $(id)$(projsuffix)'
      default do
        "#{id}#{projsuffix}"
      end
    end

    attr :projsuffix, type: :string do
      title 'Optional suffix to be applied to $(projname)'
      note 'Has no effect if $(projname) is set explicitly'
    end

    attr_array :src, type: :src_spec do
      title 'Source file specification'
      base :local
      flags :required # Must be specified by user
      flags :no_sort # Final source will be sorted so no need to sort this
      flag_options :force # Specify when explicitly specidied src does not exist on disk but still want to add to project
      flag_options :export, :export_only
      value_option :vpath # For organising files in a generated project
      # TODO: examples for excludes
      # TODO: add absolute path example
      example "src ['*']  # Add all src in $(root) whose extension is in $(src_ext)"
      example "src ['src/**/*'] # Add all src in $(root)/src whose extension is in $(src_ext), recursively"
      example "src ['main.c', 'io.c'] # Add src explicitly"
      example "src ['build.jaba']  # Explicitly add even though not in $(src_ext)"
      example "src ['does_not_exist.cpp'], :force  # Force addition of file not on disk"
    end
    
    attr_array :src_ext, type: :string do
      title 'File extensions used when matching src files'
      note 'Defaults to standard C/C++ file types and host/platform-specific files, but more can be added for informational purposes.'
      flags :no_sort
      flag_options :export, :export_only
      default do
        ext = ['.cpp', '.h', '.inl', '.c', '.cc', '.cxx', '.hpp']
        ext.concat(host_ref.cpp_src_ext)
        ext.concat(platform_ref.cpp_src_ext)
        ext
      end
    end

  end

  # Sub-grouping of attributes that pertain to a build configuration
  #
  define :config do

    attr :arch, type: :symbol_or_string do
      title 'Target architecture as an id'
      note 'Query current architecture being processed. Use to define control flow to set config-specific atttributes'
      flags :read_only
    end

    attr :arch_ref, type: :node_ref do
      title 'Target architecture as an object'
      node_type :arch
    end

    # Required attributes that the user must provide a value for.
    #
    attr :type, type: :choice do
      title 'Project type'
      items [:app, :console, :lib, :dll]
      flags :required
    end

    # Control flow attributes
    #
    attr :config, type: :symbol_or_string do
      title 'Current target config as an id'
      note 'Returns current config being processed. Use to define control flow to set config-specific atttributes'
      flags :read_only
      # TODO: examples, including regexes
    end

    attr_hash :buildtool, key_type: :src_spec, type: :node do
      title 'Custom build tool'
      node_type :buildtool
      flags :delay_evaluation
    end

    # Common attributes. These are the attributes that most definitions will set/use.
    #
    attr_array :shell, type: :string do
      title 'Shell commands to execute during build'
      note 'Maps to build events in Visual Studio'
      flag_options :export, :export_only
      value_option :when, required: true, items: [:PreBuild, :PreLink, :PostBuild]
    end

    attr :build_root, type: :dir do
      title 'Root directory for build artifacts'
      note 'Specified as a relative path from main build root'
      base :global
      default 'build'
      flags :no_check_exist
    end

    attr :bindir, type: :dir do
      title 'Output directory for executables'
      base :global
      default do
        "#{build_root}/bin/#{arch}/#{config}"
      end
      flags :no_check_exist
    end

    attr :libdir, type: :dir do
      title 'Output directory for libs'
      base :global
      default do
        "#{build_root}/lib/#{arch}/#{config}"
      end
      flags :no_check_exist
    end

    attr :objdir, type: :dir do
      title 'Output directory for object files'
      base :global
      default do
        "#{build_root}/obj/#{arch}/#{config}/#{projname}"
      end
      flags :no_check_exist
    end

    attr_array :libs, type: :file do
      title 'Paths to required non-system libs'
      base :local
      flags :no_sort, :no_check_exist
    end

    attr_array :syslibs, type: :string do
      title 'System libs'
      flags :no_sort
      flag_options :export, :export_only
    end

    attr_array :cflags, type: :string do
      title 'Raw compiler command line switches'
      flag_options :export, :export_only
    end

    attr :configname, type: :symbol_or_string do
      title 'Display name of config as seen in IDE'
      default do
        config
      end
    end

    attr :debug, type: :bool do
      title 'Flags config as a debug config'
      notes'Defaults to true if config id contains \'debug\''
      default do
        config =~ /debug/i ? true : false
      end
    end
    
    attr_array :define, type: :symbol_or_string do
      title 'Preprocessor defines'
      flag_options :export, :export_only
    end

    attr_array :inc, type: :dir do
      title 'Include paths'
      base :local
      flags :no_sort
      flag_options :export, :export_only
      example "inc ['mylibrary/include']"
      example "inc ['mylibrary/include'], :export # Export include path to dependents"
    end

    attr :importlib do
      title 'Name of import lib for use will dlls'
      note 'Defaults to $(projname)$(targetsuffix).lib'
      default do
        "#{projname}#{targetsuffix}.lib"
      end
    end

    attr_array :nowarn do
      title 'Warnings to disable'
      note 'Placed directly into projects as is, with no validation'
      flag_options :export, :export_only
      example "nowarn [4100, 4127, 4244] if visual_studio?"
    end

    attr :targetname, type: :string do
      title 'Base name of output file without extension'
      note 'Defaults to $(targetprefix)$(projname)$(targetsuffix)'
      default do
        "#{targetprefix}#{projname}#{targetsuffix}"
      end
    end
    
    attr :targetprefix, type: :string do
      title 'Prefix to apply to $(targetname)'
      note 'Has no effect if $(targetname) specified'
    end
    
    attr :targetsuffix, type: :string do
      title 'Suffix to apply to $(targetname)'
      note 'Has no effect if $(targetname) specified'
    end

    attr :targetext, type: :string do
      title 'Extension to apply to $(targetname)'
      note 'Defaults to standard extension for $(type) of project for target $(platform)'
      default do
        case platform
        when :windows
          case type
          when :app, :console
            '.exe'
          when :lib
            '.lib'
          when :dll
            '.dll'
          end
        when :ios
          case type
          when :app, :console
            '.app'
          when :lib
            '.a'
          end
        end
      end
    end

    attr :warnerror, type: :bool do
      title 'Enable warnings as errors'
      example 'warnerror true'
    end

    # Not so common attributes. Often used but not fundamental.
    #
    attr :character_set, type: :choice do
      title 'Character set'
      items [
        :mbcs,    # Visual Studio only
        :unicode,
        nil
      ]
      default nil
      example 'character_set :unicode'
    end

    attr :exceptions, type: :choice do
      title 'Enables C++ exceptions'
      items [true, false]
      items [:structured] # Windows only
      default true
      example 'exceptions false # disable exceptions'
    end

    attr :rtti, type: :bool do
      title 'Enables runtime type information'
      example 'rtti true'
    end

    attr :toolset, type: :string do
      title 'Toolset version to use'
      note 'Defaults to host\'s default toolset'
      default { host_ref.toolset }
    end

  end

end

open_type :host do

  attr_array :cpp_supported_platforms do
    title 'Valid target platforms for this host'
  end

  attr :cpp_project_classname, type: :string do
    title 'Class name of host-specific Project subclass'
    note 'For example Vcxproj, Xcodeproj. Use when implementing a new project type.'
    flags :required
  end

  attr_array :cpp_src_ext, type: :string do
    title 'Default src file extensions for C++ projects'
    notes 'Any host-specific extensions specified are in addition to the Core C/C+ file types specified in $(cpp#src_ext)'
    flags :no_sort
    default []
  end

end

open_type :platform do
  attr_array :cpp_src_ext, type: :string do
    title 'Default src file extensions for C++ projects'
    notes 'Any platform-specific extensions specified are in addition to the Core C/C+ file types specified in $(cpp#src_ext)'
    flags :no_sort
    default []
  end
end

open_type :globals do
  attr_array :cpp_hosts, type: :node_ref do
    title 'Target hosts'
    node_type :host
    flags :required
  end
end

open_instance :globals, type: :globals do
  cpp_hosts [:vs2019] # TODO: for now...
end
