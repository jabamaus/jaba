- Fix error reporting for user-level errors like no jaba files being in folder. Should not dump an internal callstack.
- ability to have build tree out of src but projects in src? config option to base projdir off src_root instead of dest_root?
- Refactor src_root handling
- Decide on format of jaba.output.json
- Make defaults work per-file. Introduce global_defaults.
- Change config system. Move config attrs out of globals and into new config type. Always generate a config file (not just out of source builds).
  Load config file first. Prevent config from being modified once loaded. Introduce new type for congig and stop using globals.
- Add example modules to docs, including comment docs.
- I think its time to move setting config attrs into their own block. Prevents problems with attributes having nil values when evaluating in the context of the project.
- Automatically pull in dependencies into workspace
- attr def properties should have help string/notes...
- Disallow globals from referencing itself
- Maybe add open_globals_type and open_globals_inst?
- Allow default values to take options?
- RUBY LICENSE REQUIREMENTS
- consider having a globals per-type (eg cpp globals)
- validate when --src-root can be specified. Should be required if no .jaba files in cwd and disallowed if there are.
- Check attribute validators when parsing cmd line.
- Should jaba target one 'language' (type) per run? Eg C++, C#
- Use did_you_mean? Eg
  Error at basic_dll.jaba:8: 'defines' attribute not defined. Did you mean 'define'?
- Combine jaba.input.json and jaba.output.json into one file
- validate platforms and architecture specs
- cpp attrs need to be split into project and config in reference manual
- tag attrs as control flow attrs somehow for benefit of docs
- add slnproperty which can address sln sections. Particularly useful when used with ExtensibilityGlobals
- disband VSProj in favour of VSUtilities module
- Move title/note/example into module and include
- Have a command line switch to make all error messages contain absolute paths
- How customise jaba output file? Subclass vcxproj or jdl definition, or something else?
- support for 'overriding' attribute defs when opening types
- make_generator should be able to make subclasses of eg CppGenerator
- make paths in jaba.output.json relative to itself. Introduce json node writing api to wrap this up and to make it robust.
- Have a way of globally setting default for :platforms, :hosts and :configs (and for clearing)
- Make :nocheckexists do something
- Think more about project 'skus'. Also, platforms support specific hosts. Where is that info stored?
- test :required flag compatibility
- Revisit set_to_default and wipe. Have way of clearing to default and clearing fully, but don't count that as set=true
- In defaults block are paths relative to the defaults file or the file of the definition being instanced?
- Allow 'axes' of configs. Bear in mind that platforms can be any string.
- Have some kind of spec for flag_options, eg

flag_option :export do
  note 'do exporting'
  compatibility do
    'only works on array and hash' if !array? && !hash?
    end
  end
end

- Having two arrays that reference the same type causes problems with :expose. Need to resolve this.
Need to make it so that don't expose if attribute is not single value. Also need to prevent exposing
if there are multiple attrs, with a warning.

  attr_array :valid_archs, type: :node_ref do
    note 'List of architectures supported by this platform'
    node_type :arch
    flags :required, :no_sort
  end

  attr_array :default_archs, type: :node_ref do
    note 'List of default target architectures for this platform'
    node_type :arch
    flags :required, :no_sort
  end

- check for duplicate filenames at generator level, with proper error reporting
- Make contents of attr def defaults overidable by user, including calling super
- Make _ID be id of the definition the code is in, such that it works even inside a block that is being executed in the context of a different jaba object
- Ability to reverse engineer jaba definitions from existing vsprojects
- Add check for re-entrancy when evaluating default blocks
- consistent method names across tests and consistent brackets on must_equal
- Create a table of attr mappings from jaba->premake->cmake
- Bring back boolean reader, eg if debug?
- Add 'underlying type' to attribute types? eg file.dir/src_spec are strings. Use this for extra
  validation and also to sort using casecmp
- resolve issues around sorting with mixed type elements
- sortable arrays must be of same type
- Add wildcard validation to dir property

* Jaba does not try to be a complete cross platform 'API' to underlying build systems. It recognises where there is obvious commonality,
eg include paths, defines, libs, etc, but where things diverge across systems you can simply drop down and address that system directly,
because defining conditional data is very easy.
* Jaba aims to be lightweight. An executable and a bundle of ruby source files. Without sacrificing power and fleixibilty.
* Jaba aims to excel at validation and error reporting.

FAQ
Q: Why is Jaba so aggressive with sorting and stripping duplicates?
A: Because Jaba cares a lot about a clean build, and about deterministic minimum noise generation.

Q: Why is Jaba library code style not very 'ruby'?
A: The code is written in a style that is the easiest to step through in an IDE debugger, which is an essential tool in the development process
