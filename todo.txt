core
- versioning support
- Revisit set_to_default and wipe. Have way of clearing to default and clearing fully, but don't count that as set=true
- Employ did you mean style error reporting
  Error at basic_dll.jaba:8: 'defines' attribute not defined. Did you mean 'define'?
- Add title/example/notes to flag_options
- Add sticky/transient concept to flag and value options
- Validation and documentation specification for method args, similar to attribute options
- Make _ID be id of the definition the code is in, such that it works even inside a block that is being executed in the context of a different jaba object
- Make defaults work per-file. Introduce global_defaults. Or a scope option to defaults.
- localise error strings into a single file, using macros for variable substitution. As well as being better for standardisation could support multiple languages.
- Implement element deletion for hash attribute
- Disallow ruby keywords as attr names, eg 'in' fails
- [BUG] Fix issue with buildsystem default being different in different files.
- look again at receiver of on_called
- make logging and error functionality into Context class methods so they are always available.
- prefix/postfix/delete/exclude should be specced with attr_option. exclude should get its type from its owning attr.
- Add a 'block' attr type and use it to implement 'per_target' and 'per_config' attr types so user can optionally
  group attrs. Use for example in the mrbc rule code which should only be executed per-target
  
path attrs/src
- Support **.h as alternative to **/*.h
- :no_wildcard flag to disallow wildcards
- wildcard validation
- Validate paths for missing / eg '../..debase-ruby_core_source/
- vpath support. Macros would make it more powerful.
- flag to control whether absolute paths allowed in file/dir attrs. Eg build_root_offset is not an offset if absolute path used.
  Is it even a path attr?
- Review whether '.' is allowed in :basename type. Maybe Introduce and allow_ext option.
- enforce that paths stay within their base dir spec?
- exclude from build should be an :info option on src attr

workspace
- Automatically pull in dependencies in
- categories
- add slnproperty which can address sln sections. Particularly useful when used with ExtensibilityGlobals

target
- Make custom build rule support multiple outputs. Requires adding array subscript support to macros.
- Make shell build events use macros
- Add 'install' to copy exes somewhere post build
- Allow 'axes' of configs? Bear in mind that platforms can be any string.

VisualC
- support for debugger working directory via .user file
- Is ToolsVersion='16.0' needed?

test
- vpath
- Regression tests for generated files.
- option in tests to log to stdout
- reorg tests into core folder and target folder?
- bring attr_hash tests back

possible features
- Ability to reverse engineer jaba definitions from existing vsprojects
- Command line option to print full exception info
- Have a command line switch to make all error messages contain absolute paths
- Add invocations.txt to each example which can execute in multiple ways?
- Ability to 'grab' functionality that auto-adds abilities, eg text file
- Auto-delete non-generated files in buildsystem dir (cruft removal)
- Support arrays in hash values? That would allow src attr to work as a value as well as a key.

docs
- tag attrs as control flow attrs somehow for benefit of docs
- ruby license requirements
- Stats in docs, eg number of files in jaba release, size of zip.
- Add node option attrs
- Add attribute options
- common attrs
- methods

jaba tool
- add --list-globals option
- Implement jaba build command to build vs solution
- clean command

v2 new features/changes:
 - removed json output [DONE]
 - rebased onto mruby [DONE]
 - src files calculated immediately [DONE]
 - rule inputs/outputs automatically added to src [DONE]
 - dependencies pulled into solution automatically [TODO]
 - per file defaults [TODO]
 - delete stale projects in build system [TODO]
 - ability to set src per config instead of per-project [DONE]
 - ability to set target type per config instead of per-project [DONE]
 - rethought transitive properties of dependencies [TODO]
 - string/symbol/symbol_or_string combined into just string [DONE]
 - key/value options are now attributes in their own right with attendant benefits [DONE]